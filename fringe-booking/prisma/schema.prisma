// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  Reviews Review[]
  Tickets Ticket[]

  @@map("Users")
}

model Event {
  id          String @id @default(uuid())
  venueId     String
  genreId     String
  disountId   String
  createdById String

  title            String
  metaDescription  String   @db.Text
  eventDescription String   @db.Text
  featuredPersons  String[]
  bannerImageUrl   String?

  startDate     DateTime
  endDate       DateTime
  startTime     String
  endTime       String
  contentRating ContentRating

  tags String[]

  unitPrice      Decimal @db.Decimal(10, 2)
  currency       String  @default("AUD")
  capacity       Int
  availableSeats Int
  isPublished    Boolean @default(false)
  isFeatured     Boolean @default(false)
  isSoldOut      Boolean @default(false)
  isCancelled    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventPriceTiers EventPriceTier[]
  Reviews         Review[]
  Venue           Venue            @relation(fields: [venueId], references: [id])
  Tickets         Ticket[]
  EventGenre      EventGenre[]

  @@index([startDate])
  @@index([isPublished])
  @@index([isFeatured])
  @@map("Events")
}

model EventPriceTier {
  id          String @id @default(uuid())
  eventId     String
  priceTierId String

  Event      Event     @relation(fields: [eventId], references: [id])
  PriceTiers PriceTier @relation(fields: [priceTierId], references: [id])

  @@index([eventId, priceTierId])
  @@map("EventPriceTiers")
}

model PriceTier {
  id              String  @id @default(uuid())
  name            String
  metaDescription String?
  maxPrice        Decimal @db.Decimal(10, 2)
  minPrice        Decimal @db.Decimal(10, 2)

  EventPriceTiers EventPriceTier[]

  @@map("PriceTier")
}

model Review {
  id      String @id @default(uuid())
  eventId String

  title       String?
  description String?
  rating      Int?
  userId      String

  Event Event @relation(fields: [eventId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

  @@map("Reviews")
}

model Venue {
  id            String @id @default(uuid())
  name          String
  streetAddress String
  city          String
  state         String
  zipCode       String

  Events Event[]

  @@map("Venues")
}

model Ticket {
  id           String       @id @default(uuid())
  eventId      String
  userId       String
  priceTierId  String?
  purchaseDate DateTime     @default(now())
  seatNumber   String?
  isRefunded   Boolean
  qrCode       String?
  status       TicketStatus @default(VALID)

  Event Event @relation(fields: [eventId], references: [id])
  User  User  @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
  @@map("Tickets")
}

model Order {
  id      String @id @default(uuid())
  eventId String

  @@map("Orders")
}

model EventGenre {
  id      String @id @default(uuid())
  eventId String
  genreId String

  Event Event @relation(fields: [eventId], references: [id])
  Genre Genre @relation(fields: [genreId], references: [id])

  @@map("EventGenres")
}

model Genre {
  id          String       @id @default(uuid())
  Name        String
  Description String
  EventGenre  EventGenre[]

  @@map("Genres")
}

enum TicketStatus {
  VALID
  EXPIRED
}

enum ContentRating {
  G
  M
  PG
  MA15
  R18PLUS
}
